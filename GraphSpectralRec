import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
from numpy import set_printoptions
set_printoptions(precision=3, threshold=5, edgeitems=4, suppress=True)

'''

Here we first define some parameters:

'''
N_Triangle = 4
N_Rec = 1
TriStart = 0 
TriNodes = [[3 * i , 3 * i + 1, 3 * i + 2] for i in range(N_Triangle)]
RecStart = N_Triangle * 3 
RecNodes = [[RecStart + 4 * i , RecStart + 4 * i + 1, RecStart + 4 * i + 2 , RecStart + 4 * i + 3] for i in range(N_Rec)]

center = N_Triangle * 3 + N_Rec * 4
A = np.eye(center + 1 ) * 0
D = np.eye(center + 1) * 2
x = []
edges = []
for trin in TriNodes:
    edges.append([trin[0], trin[1]])
    edges.append([trin[1], trin[2]])
    edges.append([trin[0], trin[2]])
    edges.append([trin[0], center ])
    D[trin[0]][trin[0]] = 3
    x.append(1)
    x.append(1)
    x.append(1)

for trin in RecNodes:
    edges.append([trin[0], trin[1]])
    edges.append([trin[1], trin[2]])
    edges.append([trin[3], trin[2]])
    edges.append([trin[0], trin[3]])
    edges.append([trin[0], center ])
    D[trin[0]][trin[0]] = 3
    x.append(0)
    x.append(0)
    x.append(0)
    x.append(0)
x.append(0)




for edge in edges:
    n1, n2 = edge[0], edge[1]
    A[n1][n2] = 1
    A[n2][n1] = 1
G = nx.from_numpy_matrix(A)
subax1 = plt.subplot(121)
nx.draw(G,  with_labels=True)   # default spring_layout
print(D[:5][:5])

color_map = []
for i, node in enumerate(G):
    if x[i]  == 1:
        color_map.append('green')
    else: 
        color_map.append('blue')  
nx.draw(G, node_color=color_map, with_labels=True)
plt.title('hope created mask')
plt.show()

L = D - A
lambdas , U = np.linalg.eigh(L)
print(L)
idx = lambdas.argsort()[::-1]   
lambdas = lambdas[idx]
U = U[:,idx]
print(lambdas)
print(U)

x = np.array(x).reshape(center + 1, 1)
output = U.T @ x
print(np.abs(output.reshape(-1)) > 0.0001)
# print(  output.reshape(-1).tolist())
output = output.reshape(-1).tolist()
created_mask = 0
used_vectors = []
for i in range(len(output)):
    if np.abs(output[i]) > 0.0000001:
        print(f'the {i} eigenvector * {output[i]}')
        created_mask = created_mask + output[i] * U[:, i]
        used_vectors.append(i)
created_mask = created_mask.tolist()

print(created_mask)
color_map = []
for i, node in enumerate(G):
    if created_mask[i]  > 0.9:
        color_map.append('green')
    else: 
        color_map.append('blue')  
nx.draw(G, node_color=color_map, with_labels=True)
plt.title(f'mask created by {used_vectors} ')
plt.show()
